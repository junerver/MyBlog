package com.junerver.myblog.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.junerver.myblog.db.entity.ArticleEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICLE_ENTITY".
*/
public class ArticleEntityDao extends AbstractDao<ArticleEntity, Long> {

    public static final String TABLENAME = "ARTICLE_ENTITY";

    /**
     * Properties of entity ArticleEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Post_content = new Property(1, String.class, "post_content", false, "POST_CONTENT");
        public final static Property Post_title = new Property(2, String.class, "post_title", false, "POST_TITLE");
        public final static Property Post_date = new Property(3, String.class, "post_date", false, "POST_DATE");
    };


    public ArticleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArticleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"POST_CONTENT\" TEXT," + // 1: post_content
                "\"POST_TITLE\" TEXT," + // 2: post_title
                "\"POST_DATE\" TEXT);"); // 3: post_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICLE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String post_content = entity.getPost_content();
        if (post_content != null) {
            stmt.bindString(2, post_content);
        }
 
        String post_title = entity.getPost_title();
        if (post_title != null) {
            stmt.bindString(3, post_title);
        }
 
        String post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindString(4, post_date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ArticleEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String post_content = entity.getPost_content();
        if (post_content != null) {
            stmt.bindString(2, post_content);
        }
 
        String post_title = entity.getPost_title();
        if (post_title != null) {
            stmt.bindString(3, post_title);
        }
 
        String post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindString(4, post_date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ArticleEntity readEntity(Cursor cursor, int offset) {
        ArticleEntity entity = new ArticleEntity( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // post_content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // post_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // post_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ArticleEntity entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setPost_content(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPost_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPost_date(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ArticleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ArticleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
